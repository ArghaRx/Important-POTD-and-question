https://leetcode.com/problems/contiguous-array/description/


Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.



class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> mp = new HashMap<>();
        // in map , store the sum and the index,,,jar jnno oi sum ta ese6e
        int sum = 0;
        int subArrayLength = 0;

        for (int i = 0; i < n; i++) {


            //For each element in the array, update the sum according to the element (decrement by 1 for 0, increment by 1 for 1).
            sum += nums[i] == 0 ? -1 : 1;

            //If the sum becomes zero at any index, 
            //update the maximum length to the current index plus one.
            if (sum == 0) {
                subArrayLength = i + 1;


            } else if (mp.containsKey(sum)) {
                // ekon jar jnno oi sum ta abar repeat hoe6e and age je index er jnno oi sum ese6ilo
                // oder difference
                // cur index = i, prev index = map.get(sum)
                subArrayLength = Math.max(subArrayLength, i - mp.get(sum));
            }
            
            
             else {
                mp.put(sum, i);
            }
        }
        return subArrayLength;
    }
}

Time complexity: (O(n)
